network_type = "gru"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.1,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.025,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 10,
numepochs = 1000,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 500,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 800,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 25,
numepochs = 1000,
network_type = "rnn"
)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 15,
numepochs = 1000,
network_type = "rnn"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
View(Ytrain)
View(Yreal)
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
View(Ytrain)
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
View(result_data)
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("rnn", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fecha_dia_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fecha_dia_anterior <- fecha_dia_anterior
# Estatísticas
summary(data_analise)
# Excluindo os NAs
data_analise <- data_analise[1:248,]
# Separei a target (y) e a feature (x)
x <- data_analise[,2]
y <- data_analise[,1]
# Recorrências em 3 dimensões (facilitar o processamento por partes):
# 1: amostra
# 2: quantas vezes vou passar a amostra na rede
# 3: número de features
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
# Colocando valores de 0 a 1 pra melhorar a performance
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(123)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
# Correlação final
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
legend("topleft",
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l", legend = c("Temperatura", "Ozônio"))
plot(Ytrain, type = "l", col = "darkred", legend = c("Temperatura", "Ozônio"))
lines(Yreal, col = "darkblue", type = "l")
plot(Ytrain, type = "l", col = "darkred", legend("topleft",
lines(Yreal, col = "darkblue", type = "l")
plot(Ytrain, type = "l", col = "darkred",legend = c("Temperatura", "Ozônio"))
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
legend("topleft",
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("rnn", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fecha_dia_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fecha_dia_anterior <- fecha_dia_anterior
# Estatísticas
summary(data_analise)
# Excluindo os NAs
data_analise <- data_analise[1:248,]
# Separei a target (y) e a feature (x)
x <- data_analise[,2]
y <- data_analise[,1]
# Recorrências em 3 dimensões (facilitar o processamento por partes):
# 1: amostra
# 2: quantas vezes vou passar a amostra na rede
# 3: número de features
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
# Colocando valores de 0 a 1 pra melhorar a performance
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(123)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'black')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","black"),
lty = c(1,1), lwd = c(1,1))
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
# Correlação final
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'blue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","blue"),
lty = c(1,1), lwd = c(1,1))
plot(Ytrain, col = 'darkred', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("darkred","darkblue"),
lty = c(1,1), lwd = c(1,1))
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","darkblue"),
lty = c(1,1), lwd = c(1,1))
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","darkblue"),
lty = c(1,1), lwd = c(1,1))
?rnn
################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("rnn", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
################################################################################
#                  Prevendo valores das ações da Petrobras (PETR4)             #
#                  com base em uma Recurrent Neural Networks (rnn)             #
################################################################################
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fecha_dia_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fecha_dia_anterior <- fecha_dia_anterior
# Estatísticas
summary(data_analise)
# Excluindo os NAs
data_analise <- data_analise[1:248,]
# Separei a target (y) e a feature (x)
x <- data_analise[,2]
y <- data_analise[,1]
# Recorrências em 3 dimensões (facilitar o processamento por partes):
# 1: amostra
# 2: quantas vezes vou passar a amostra na rede
# 3: número de features
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
# Colocando valores de 0 a 1 pra melhorar a performance
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(123)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","darkblue"),
lty = c(1,1), lwd = c(1,1))
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
# Correlação final
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("rnn", "dplyr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
################################################################################
#                  Prevendo valores das ações da Petrobras (PETR4)             #
#                  com base em uma Recurrent Neural Networks (rnn)             #
################################################################################
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fecha_dia_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fecha_dia_anterior <- fecha_dia_anterior
# Estatísticas
summary(data_analise)
# Excluindo os NAs
data_analise <- data_analise[1:248,]
# Separei a target (y) e a feature (x)
x <- data_analise[,2]
y <- data_analise[,1]
# Recorrências em 3 dimensões (facilitar o processamento por partes):
# 1: amostra
# 2: quantas vezes vou passar a amostra na rede
# 3: número de features
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
# Colocando valores de 0 a 1 pra melhorar a performance
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(123)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","darkblue"),
lty = c(1,1), lwd = c(1,1))
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
# Correlação final
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("rnn", "dplyr")
################################################################################
#                  Prevendo valores das ações da Petrobras (PETR4)             #
#                  com base em uma Recurrent Neural Networks (rnn)             #
################################################################################
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fecha_dia_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fecha_dia_anterior <- fecha_dia_anterior
# Estatísticas
summary(data_analise)
# Excluindo os NAs
data_analise <- data_analise[1:248,]
# Separei a target (y) e a feature (x)
x <- data_analise[,2]
y <- data_analise[,1]
# Recorrências em 3 dimensões (facilitar o processamento por partes):
# 1: amostra
# 2: quantas vezes vou passar a amostra na rede
# 3: número de features
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
# Colocando valores de 0 a 1 pra melhorar a performance
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(123)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
# Prevendo com a base train
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
# Percentual da correlação entre matrizes
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, col = 'red', type='l',
main = "Prevendo valor das ações: PETR4",
ylab = "Treino, Real")
lines(Yreal, type = 'l', col = 'darkblue')
legend("bottomright", c("Previsão", "Atual"),
col = c("red","darkblue"),
lty = c(1,1), lwd = c(1,1))
# Já na base test...
Ytest = t(matrix(Y[,test], nrow = 1))
Ypredicted = t(matrix(predictr(model, Y[,test]), nrow = 1))
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
# Correlação final
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
